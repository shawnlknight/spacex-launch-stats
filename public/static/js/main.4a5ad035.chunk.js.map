{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","Launches","useQuery","gql","loading","error","data","Fragment","launches","map","key","uuidv1","GET_LAUNCH","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","console","log","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a5ad035.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ab10d000.png\";","import React from 'react'\nimport classNames from 'classnames'\nimport Moment from 'react-moment'\nimport { Link } from 'react-router-dom'\n\nexport default function LaunchItem({\n  launch: { flight_number, mission_name, launch_date_local, launch_success }\n}) {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            Mission:{' '}\n            <span\n              className={classNames({\n                'text-success': launch_success,\n                'text-danger': !launch_success\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4>\n          <p>\n            Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { gql } from 'apollo-boost'\nimport { useQuery } from '@apollo/react-hooks'\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey'\nimport uuidv1 from 'uuid/v1'\n\nfunction Launches() {\n  const { loading, error, data } = useQuery(gql`\n    {\n      launches {\n        flight_number\n        mission_name\n        launch_date_local\n        launch_success\n      }\n    }\n  `)\n\n  const displayLaunchData = () => {\n    if (loading) {\n      return <h4>Loading...</h4>\n    }\n    if (error) {\n      return (\n        <h4>We are sorry, an error has occurred. Please come back later!</h4>\n      )\n    }\n\n    return (\n      <React.Fragment>\n        {data.launches.map(launch => (\n          <LaunchItem key={uuidv1()} launch={launch} />\n        ))}\n      </React.Fragment>\n    )\n  }\n\n  return (\n    <React.Fragment>\n      <h1 className=\"display-4 my-3\">Launches</h1>\n      <MissionKey />\n      {displayLaunchData()}\n    </React.Fragment>\n  )\n}\n\nexport default Launches\n","import React from 'react'\nimport { gql } from 'apollo-boost'\nimport { useQuery } from '@apollo/react-hooks'\nimport { Link } from 'react-router-dom'\nimport classNames from 'classnames'\n\nconst GET_LAUNCH = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`\n\nexport default function Launch(props) {\n  let { flight_number } = props.match.params\n  flight_number = parseInt(flight_number)\n\n  const { loading, error, data } = useQuery(GET_LAUNCH, {\n    variables: { flight_number }\n  })\n\n  if (loading) {\n    return <h1>Loading...</h1>\n  }\n  if (error) {\n    return <h1>ERROR</h1>\n  }\n\n  const {\n    mission_name,\n    launch_year,\n    launch_success,\n    rocket: { rocket_id, rocket_name, rocket_type }\n  } = data.launch\n\n  console.log('data', data)\n  return (\n    <React.Fragment>\n      <h1 className=\"display-4 my-3\">\n        <span className=\"text-dark\">Mission: {mission_name}</span>\n      </h1>\n      <h4 className=\"mb-3\">Launch Details</h4>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n        <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n        <li className=\"list-group-item\">\n          Launch Successful:{' '}\n          <span\n            className={classNames({\n              'text-success': launch_success,\n              'text-danger': !launch_success\n            })}\n          >\n            {launch_success ? 'Yes' : 'No'}\n          </span>\n        </li>\n      </ul>\n\n      <h4 className=\"my-3\">Rocket Details</h4>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n      </ul>\n      <hr />\n      <Link to=\"/\" className=\"btn btn-secondary\">\n        Back\n      </Link>\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\nimport logo from './logo.png'\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img\n            src={logo}\n            alt=\"Spacex\"\n            style={{\n              width: 300,\n              display: 'block',\n              margin: 'auto'\n            }}\n          />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}